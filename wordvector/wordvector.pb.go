// Code generated by protoc-gen-go.
// source: wordvector.proto
// DO NOT EDIT!

/*
Package wordvector is a generated protocol buffer package.

It is generated from these files:
	wordvector.proto

It has these top-level messages:
	GetVectorRequest
	GetVectorReply
*/
package wordvector

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the word.
type GetVectorRequest struct {
	Word string `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
}

func (m *GetVectorRequest) Reset()                    { *m = GetVectorRequest{} }
func (m *GetVectorRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVectorRequest) ProtoMessage()               {}
func (*GetVectorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetVectorRequest) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

// The response message containing the word, word index in the
// vocabulary and its vector.
type GetVectorReply struct {
	Word     string    `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
	Index    int64     `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	Features []float32 `protobuf:"fixed32,3,rep,packed,name=features" json:"features,omitempty"`
}

func (m *GetVectorReply) Reset()                    { *m = GetVectorReply{} }
func (m *GetVectorReply) String() string            { return proto.CompactTextString(m) }
func (*GetVectorReply) ProtoMessage()               {}
func (*GetVectorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetVectorReply) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *GetVectorReply) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GetVectorReply) GetFeatures() []float32 {
	if m != nil {
		return m.Features
	}
	return nil
}

func init() {
	proto.RegisterType((*GetVectorRequest)(nil), "wordvector.GetVectorRequest")
	proto.RegisterType((*GetVectorReply)(nil), "wordvector.GetVectorReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WordVector service

type WordVectorClient interface {
	// Sends a word vector of given word.
	GetVector(ctx context.Context, in *GetVectorRequest, opts ...grpc.CallOption) (*GetVectorReply, error)
}

type wordVectorClient struct {
	cc *grpc.ClientConn
}

func NewWordVectorClient(cc *grpc.ClientConn) WordVectorClient {
	return &wordVectorClient{cc}
}

func (c *wordVectorClient) GetVector(ctx context.Context, in *GetVectorRequest, opts ...grpc.CallOption) (*GetVectorReply, error) {
	out := new(GetVectorReply)
	err := grpc.Invoke(ctx, "/wordvector.WordVector/GetVector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WordVector service

type WordVectorServer interface {
	// Sends a word vector of given word.
	GetVector(context.Context, *GetVectorRequest) (*GetVectorReply, error)
}

func RegisterWordVectorServer(s *grpc.Server, srv WordVectorServer) {
	s.RegisterService(&_WordVector_serviceDesc, srv)
}

func _WordVector_GetVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordVectorServer).GetVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordvector.WordVector/GetVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordVectorServer).GetVector(ctx, req.(*GetVectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordVector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wordvector.WordVector",
	HandlerType: (*WordVectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVector",
			Handler:    _WordVector_GetVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wordvector.proto",
}

func init() { proto.RegisterFile("wordvector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xcf, 0x2f, 0x4a,
	0x29, 0x4b, 0x4d, 0x2e, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0xa9, 0x71, 0x09, 0xb8, 0xa7, 0x96, 0x84, 0x81, 0x39, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x42, 0x42, 0x5c, 0x2c, 0x20, 0x15, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6,
	0x52, 0x18, 0x17, 0x1f, 0x92, 0xba, 0x82, 0x9c, 0x4a, 0x6c, 0xaa, 0x84, 0x44, 0xb8, 0x58, 0x33,
	0xf3, 0x52, 0x52, 0x2b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x98, 0x83, 0x20, 0x1c, 0x21, 0x29, 0x2e,
	0x8e, 0xb4, 0xd4, 0xc4, 0x92, 0xd2, 0xa2, 0xd4, 0x62, 0x09, 0x66, 0x05, 0x66, 0x0d, 0xa6, 0x20,
	0x38, 0xdf, 0x28, 0x94, 0x8b, 0x2b, 0x3c, 0xbf, 0x28, 0x05, 0x62, 0xb0, 0x90, 0x3b, 0x17, 0x27,
	0xdc, 0x16, 0x21, 0x19, 0x3d, 0x24, 0x97, 0xa3, 0x3b, 0x52, 0x4a, 0x0a, 0x87, 0x6c, 0x41, 0x4e,
	0xa5, 0x12, 0x83, 0x93, 0x3c, 0x17, 0x92, 0x27, 0x9d, 0xf8, 0x11, 0x56, 0x04, 0x80, 0x42, 0x20,
	0x80, 0x31, 0x89, 0x0d, 0x1c, 0x14, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xea, 0xbc,
	0x72, 0x1e, 0x01, 0x00, 0x00,
}
